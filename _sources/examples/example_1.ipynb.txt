{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example 1 - Number of DOF influence in Natural Frequency\n",
    "=========\n",
    "In this example, we use the rotor seen in Example 5.8.1 from 'Dynamics of Rotating Machinery' by MI Friswell, JET Penny, SD Garvey & AW Lees, published by Cambridge University Press, 2010. Which is a symmetric rotor with a single disk in the center. The shaft is hollow with an outside diameter of $80 mm$, an inside\n",
    "diameter of $30 mm$, and a length of $1.2 m$ and it is modeled using Euler-Bernoulli elements, with no internal shaft damping.\n",
    "The bearings are rigid and short and the disk has a diameter of $400 mm$ and a thickness\n",
    "of $80 mm$.\n",
    "The disk and shaft elements are made of steel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <a href=\"https://bokeh.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
       "        <span id=\"1001\">Loading BokehJS ...</span>\n",
       "    </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(root) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  var force = true;\n",
       "\n",
       "  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n",
       "    root._bokeh_onload_callbacks = [];\n",
       "    root._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "  var JS_MIME_TYPE = 'application/javascript';\n",
       "  var HTML_MIME_TYPE = 'text/html';\n",
       "  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
       "  var CLASS_NAME = 'output_bokeh rendered_html';\n",
       "\n",
       "  /**\n",
       "   * Render data to the DOM node\n",
       "   */\n",
       "  function render(props, node) {\n",
       "    var script = document.createElement(\"script\");\n",
       "    node.appendChild(script);\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when an output is cleared or removed\n",
       "   */\n",
       "  function handleClearOutput(event, handle) {\n",
       "    var cell = handle.cell;\n",
       "\n",
       "    var id = cell.output_area._bokeh_element_id;\n",
       "    var server_id = cell.output_area._bokeh_server_id;\n",
       "    // Clean up Bokeh references\n",
       "    if (id != null && id in Bokeh.index) {\n",
       "      Bokeh.index[id].model.document.clear();\n",
       "      delete Bokeh.index[id];\n",
       "    }\n",
       "\n",
       "    if (server_id !== undefined) {\n",
       "      // Clean up Bokeh references\n",
       "      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n",
       "      cell.notebook.kernel.execute(cmd, {\n",
       "        iopub: {\n",
       "          output: function(msg) {\n",
       "            var id = msg.content.text.trim();\n",
       "            if (id in Bokeh.index) {\n",
       "              Bokeh.index[id].model.document.clear();\n",
       "              delete Bokeh.index[id];\n",
       "            }\n",
       "          }\n",
       "        }\n",
       "      });\n",
       "      // Destroy server and session\n",
       "      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n",
       "      cell.notebook.kernel.execute(cmd);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when a new output is added\n",
       "   */\n",
       "  function handleAddOutput(event, handle) {\n",
       "    var output_area = handle.output_area;\n",
       "    var output = handle.output;\n",
       "\n",
       "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
       "    if ((output.output_type != \"display_data\") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n",
       "      return\n",
       "    }\n",
       "\n",
       "    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
       "\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n",
       "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
       "      // store reference to embed id on output_area\n",
       "      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
       "    }\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
       "      var bk_div = document.createElement(\"div\");\n",
       "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "      var script_attrs = bk_div.children[0].attributes;\n",
       "      for (var i = 0; i < script_attrs.length; i++) {\n",
       "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
       "      }\n",
       "      // store reference to server id on output_area\n",
       "      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
       "    }\n",
       "  }\n",
       "\n",
       "  function register_renderer(events, OutputArea) {\n",
       "\n",
       "    function append_mime(data, metadata, element) {\n",
       "      // create a DOM node to render to\n",
       "      var toinsert = this.create_output_subarea(\n",
       "        metadata,\n",
       "        CLASS_NAME,\n",
       "        EXEC_MIME_TYPE\n",
       "      );\n",
       "      this.keyboard_manager.register_events(toinsert);\n",
       "      // Render to node\n",
       "      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
       "      render(props, toinsert[toinsert.length - 1]);\n",
       "      element.append(toinsert);\n",
       "      return toinsert\n",
       "    }\n",
       "\n",
       "    /* Handle when an output is cleared or removed */\n",
       "    events.on('clear_output.CodeCell', handleClearOutput);\n",
       "    events.on('delete.Cell', handleClearOutput);\n",
       "\n",
       "    /* Handle when a new output is added */\n",
       "    events.on('output_added.OutputArea', handleAddOutput);\n",
       "\n",
       "    /**\n",
       "     * Register the mime type and append_mime function with output_area\n",
       "     */\n",
       "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
       "      /* Is output safe? */\n",
       "      safe: true,\n",
       "      /* Index of renderer in `output_area.display_order` */\n",
       "      index: 0\n",
       "    });\n",
       "  }\n",
       "\n",
       "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
       "  if (root.Jupyter !== undefined) {\n",
       "    var events = require('base/js/events');\n",
       "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
       "\n",
       "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
       "      register_renderer(events, OutputArea);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  \n",
       "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    root._bokeh_timeout = Date.now() + 5000;\n",
       "    root._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
       "     \"<div style='background-color: #fdd'>\\n\"+\n",
       "     \"<p>\\n\"+\n",
       "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "     \"</p>\\n\"+\n",
       "     \"<ul>\\n\"+\n",
       "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "     \"</ul>\\n\"+\n",
       "     \"<code>\\n\"+\n",
       "     \"from bokeh.resources import INLINE\\n\"+\n",
       "     \"output_notebook(resources=INLINE)\\n\"+\n",
       "     \"</code>\\n\"+\n",
       "     \"</div>\"}};\n",
       "\n",
       "  function display_loaded() {\n",
       "    var el = document.getElementById(\"1001\");\n",
       "    if (el != null) {\n",
       "      el.textContent = \"BokehJS is loading...\";\n",
       "    }\n",
       "    if (root.Bokeh !== undefined) {\n",
       "      if (el != null) {\n",
       "        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n",
       "      }\n",
       "    } else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(display_loaded, 100)\n",
       "    }\n",
       "  }\n",
       "\n",
       "\n",
       "  function run_callbacks() {\n",
       "    try {\n",
       "      root._bokeh_onload_callbacks.forEach(function(callback) {\n",
       "        if (callback != null)\n",
       "          callback();\n",
       "      });\n",
       "    } finally {\n",
       "      delete root._bokeh_onload_callbacks\n",
       "    }\n",
       "    console.debug(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(css_urls, js_urls, callback) {\n",
       "    if (css_urls == null) css_urls = [];\n",
       "    if (js_urls == null) js_urls = [];\n",
       "\n",
       "    root._bokeh_onload_callbacks.push(callback);\n",
       "    if (root._bokeh_is_loading > 0) {\n",
       "      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    root._bokeh_is_loading = css_urls.length + js_urls.length;\n",
       "\n",
       "    function on_load() {\n",
       "      root._bokeh_is_loading--;\n",
       "      if (root._bokeh_is_loading === 0) {\n",
       "        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n",
       "        run_callbacks()\n",
       "      }\n",
       "    }\n",
       "\n",
       "    function on_error() {\n",
       "      console.error(\"failed to load \" + url);\n",
       "    }\n",
       "\n",
       "    for (var i = 0; i < css_urls.length; i++) {\n",
       "      var url = css_urls[i];\n",
       "      const element = document.createElement(\"link\");\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.rel = \"stylesheet\";\n",
       "      element.type = \"text/css\";\n",
       "      element.href = url;\n",
       "      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n",
       "      document.body.appendChild(element);\n",
       "    }\n",
       "\n",
       "    for (var i = 0; i < js_urls.length; i++) {\n",
       "      var url = js_urls[i];\n",
       "      var element = document.createElement('script');\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.async = false;\n",
       "      element.src = url;\n",
       "      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.head.appendChild(element);\n",
       "    }\n",
       "  };var element = document.getElementById(\"1001\");\n",
       "  if (element == null) {\n",
       "    console.error(\"Bokeh: ERROR: autoload.js configured with elementid '1001' but no matching script tag was found. \")\n",
       "    return false;\n",
       "  }\n",
       "\n",
       "  function inject_raw_css(css) {\n",
       "    const element = document.createElement(\"style\");\n",
       "    element.appendChild(document.createTextNode(css));\n",
       "    document.body.appendChild(element);\n",
       "  }\n",
       "\n",
       "  \n",
       "  var js_urls = [\"https://cdn.pydata.org/bokeh/release/bokeh-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-tables-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-gl-1.4.0.min.js\"];\n",
       "  var css_urls = [];\n",
       "  \n",
       "\n",
       "  var inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    function(Bokeh) {\n",
       "    \n",
       "    \n",
       "    }\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    \n",
       "    if (root.Bokeh !== undefined || force === true) {\n",
       "      \n",
       "    for (var i = 0; i < inline_js.length; i++) {\n",
       "      inline_js[i].call(root, root.Bokeh);\n",
       "    }\n",
       "    if (force === true) {\n",
       "        display_loaded();\n",
       "      }} else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!root._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      root._bokeh_failed_load = true;\n",
       "    } else if (force !== true) {\n",
       "      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n",
       "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "    }\n",
       "\n",
       "  }\n",
       "\n",
       "  if (root._bokeh_is_loading === 0) {\n",
       "    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(css_urls, js_urls, function() {\n",
       "      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(window));"
      ],
      "application/vnd.bokehjs_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"1001\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };var element = document.getElementById(\"1001\");\n  if (element == null) {\n    console.error(\"Bokeh: ERROR: autoload.js configured with elementid '1001' but no matching script tag was found. \")\n    return false;\n  }\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = [\"https://cdn.pydata.org/bokeh/release/bokeh-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-tables-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-gl-1.4.0.min.js\"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import ross as rs\n",
    "from bokeh.io import output_notebook\n",
    "output_notebook()\n",
    "from bokeh.io.showing import show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "steel = rs.materials.steel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "number_of_elements = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 40, 60]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_rotor(n_el):\n",
    "    \"\"\"Create example rotor with given number of elements.\"\"\"\n",
    "    shaft = [\n",
    "        rs.ShaftElement(1.2/(n_el), idl=0.03, odl=0.08, material=steel)\n",
    "        for i in range(n_el)\n",
    "    ]\n",
    "\n",
    "    disks = [\n",
    "        rs.DiskElement.from_geometry(n=(n_el / 2), material=steel,\n",
    "                                     width=0.08, i_d=0.08, o_d=0.4)\n",
    "    ]\n",
    "\n",
    "    bearings = [\n",
    "        rs.BearingElement(0, kxx=1e15, cxx=0),\n",
    "        rs.BearingElement(n_el, kxx=1e15, cxx=0)\n",
    "    ]\n",
    "    \n",
    "    return rs.Rotor(shaft, disks, bearings, sparse=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def analysis(speed):\n",
    "    \"\"\"Perform convergence analysis for a given speed.\"\"\"\n",
    "    # create reference rotor with 80 elements\n",
    "    rotor_80 = create_rotor(80)\n",
    "    modal_80 = rotor_80.run_modal(speed)\n",
    "\n",
    "    n_eigen = 8\n",
    "    errors = np.zeros([len(number_of_elements), n_eigen])\n",
    "\n",
    "    for i, n_el in enumerate(number_of_elements):\n",
    "        rotor = create_rotor(n_el)\n",
    "        modal = rotor.run_modal(speed)\n",
    "        errors[i, :] = abs(\n",
    "            100 * (modal.wn[:n_eigen] - modal_80.wn[:n_eigen]) \n",
    "            / modal_80.wn[:n_eigen])\n",
    "        \n",
    "    fig, ax = plt.subplots()\n",
    "    ax.set_xlabel('Number of degrees of freedom')\n",
    "    ax.set_ylabel('Natural Frequency Error(%)')\n",
    "    for i in range(8):\n",
    "        ax.semilogy(number_of_elements, errors[:, i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis(speed=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis(speed=5000*np.pi/30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
